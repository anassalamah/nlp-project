[[Finite-state machine]]

A finite-state machine (FSM) or finite-state automaton (plural: automata), or simply a state machine, is a mathematical model of computation used to design both computer programs and sequential logic circuits. It is conceived as an abstract machine that can be in one of a finite number of states. The machine is in only one state at a time; the state it is in at any given time is called the current state. It can change from one state to another when initiated by a triggering event or condition; this is called a transition. A particular FSM is defined by a list of its states, and the triggering condition for each transition.

The behavior of state machines can be observed in many devices in modern society which perform a predetermined sequence of actions depending on a sequence of events with which they are presented. Simple examples are vending machines which dispense products when the proper combination of coins is deposited, elevators which drop riders off at upper floors before going down, traffic lights which change sequence when cars are waiting, and combination locks which require the input of combination numbers in the proper order.

Finite-state machines can model a large number of problems, among which are electronic design automation, communication protocol design, language parsing and other engineering applications. In biology and artificial intelligence research, state machines or hierarchies of state machines have been used to describe neurological systems and in linguistics&mdash;to describe the grammars of natural languages.

Considered as an abstract model of computation, the finite state machine is weak; it has less computational power than some other models of computation such as the Turing machine. That is, there are tasks which no FSM can do, but some Turing machines can. This is because the FSM has limited memory. The memory is limited by the number of states.

FSMs are studied in the more general field of automata theory.

== Example: a turnstile ==
State diagram for a turnstile
A turnstile
An example of a very simple mechanism that can be modeled by a state machine is a turnstile. A turnstile, used to control access to subways and amusement park rides, is a gate with three rotating arms at waist height, one across the entryway. Initially the arms are locked, barring the entry, preventing customers from passing through. Depositing a coin or token in a slot on the turnstile unlocks the arms, allowing a single customer to push through. After the customer passes through, the arms are locked again until another coin is inserted.

Considered as a state machine, the turnstile has two states: Locked and Unlocked. There are two inputs that affect its state: putting a coin in the slot (coin) and pushing the arm (push). In the locked state, pushing on the arm has no effect; no matter how many times the input push is given, it stays in the locked state. Putting a coin in – that is, giving the machine a coin input – shifts the state from Locked to Unlocked. In the unlocked state, putting additional coins in has no effect; that is, giving additional coin inputs does not change the state. However, a customer pushing through the arms, giving a push input, shifts the state back to Locked.

The turnstile state machine can be represented by a state transition table, showing for each state the new state and the output (action) resulting from each input

 Current State Input Next State Output 
 Locked coin Unlocked Release turnstile so customer can push through 
 push Locked None 
 Unlocked coin Unlocked None 
 push Locked When customer has pushed through lock turnstile 

It can also be represented by a directed graph called a state diagram (above). Each of the states is represented by a node (circle). Edges (arrows) show the transitions from one state to another. Each arrow is labeled with the input that triggers that transition. Inputs that don't cause a change of state (such as a coin input in the Unlocked state) are represented by a circular arrow returning to the original state. The arrow into the Locked node from the black dot indicates it is the initial state.

==Concepts and terminology==
A state is a description of the status of a system that is waiting to execute a transition. A transition is a set of actions to be executed when a condition is fulfilled or when an event is received.
For example, when using an audio system to listen to the radio (the system is in the "radio" state), receiving a "next" stimulus results in moving to the next station. When the system is in the "CD" state, the "next" stimulus results in moving to the next track. Identical stimuli trigger different actions depending on the current state.

In some finite-state machine representations, it is also possible to associate actions with a state:
* Entry action: performed when entering the state,
* Exit action: performed when exiting the state.

==Representations==
Fig. 1 UML state chart example (a toaster oven)
Fig. 2 SDL state machine example
Fig. 3 Example of a simple finite state machine
For an introduction, see State diagram.

===State/Event table===
Several state transition table types are used. The most common representation is shown below: the combination of current state (e.g. B) and input (e.g. Y) shows the next state (e.g. C). The complete actions information is not directly described in the table and can only be added using footnotes. A FSM definition including the full actions information is possible using state tables (see also virtual finite-state machine).

 State transition table 
 Current state → Input ↓ State A State B State C 
 Input X ... ... ... 
 Input Y ... State C ... 
 Input Z ... ... ... 

===UML state machines===
The Unified Modeling Language has a notation for describing state machines. UML state machines overcome the limitations of traditional finite state machines while retaining their main benefits. UML state machines introduce the new concepts of hierarchically nested states and orthogonal regions, while extending the notion of actions. UML state machines have the characteristics of both Mealy machines and Moore machines. They support actions that depend on both the state of the system and the triggering event, as in Mealy machines, as well as entry and exit actions, which are associated with states rather than transitions, as in Moore machines.

===SDL state machines===
The Specification and Description Language is a standard from ITU which includes graphical symbols to describe actions in the transition:
* send an event
* receive an event
* start a timer
* cancel a timer
* start another concurrent state machine
* decision
SDL embeds basic data types called Abstract Data Types, an action language, and an execution semantic in order to make the finite state machine executable.

===Other state diagrams===
There are a large number of variants to represent an FSM such as the one in figure 3.

==Usage==
In addition to their use in modeling reactive systems presented here, finite state automata are significant in many different areas, including electrical engineering, linguistics, computer science, philosophy, biology, mathematics, and logic. Finite state machines are a class of automata studied in automata theory and the theory of computation.
In computer science, finite state machines are widely used in modeling of application behavior, design of hardware digital systems, software engineering, compilers, network protocols, and the study of computation and languages.

==Classification==
The state machines can be subdivided into Transducers, Acceptors, Classifiers and Sequencers. 

===Acceptors and recognizers===
Fig. 4 Acceptor FSM: parsing the string "nice"

Acceptors (also recognizers and sequence detectors) produce a binary output, saying either yes or no to answer whether the input is accepted by the machine or not. All states of the FSM are said to be either accepting or not accepting. At the time when all input is processed, if the current state is an accepting state, the input is accepted; otherwise it is rejected. As a rule the input are symbols (characters); actions are not used. The example in figure 4 shows a finite state machine which accepts the string "nice". In this FSM the only accepting state is number 7.

The machine can also be described as defining a language, which would contain every string accepted by the machine but none of the rejected ones; we say then that the language is accepted by the machine. By definition, the languages accepted by FSMs are the regular languages—that is, a language is regular if there is some FSM that accepts it.

====Start state====
The start state is usually shown drawn with an arrow "pointing at it from any where" (Sipser (2006) p. 34). The start state can also be a final state, if the automaton accepts also the empty string. If the start state is not an accepting state and there are no connecting edges to any of the accepting states, then the automaton is accepting nothing.

====Accept (or final) states====
Fig. 5: Representation of a finite-state machine; this example shows one that determines whether a binary number has an odd or even number of 0s, where is an accepting state.

Accept states (also referred to as accepting or final states) are those at which the machine reports that the input string, as processed so far, is a member of the language it accepts. It is usually represented by a double circle.

An example of an accepting state appears in Fig.5: a deterministic finite automaton (DFA) that detects whether the binary input string contains an even number of 0s.

S1 (which is also the start state) indicates the state at which an even number of 0s has been input. S1 is therefore an accepting state. This machine will finish in an accept state, if the binary string contains an even number of 0s (including any binary string containing no 0s). Examples of strings accepted by this DFA are ε (the empty string), 1, 11, 11..., 00, 010, 1010, 10110, etc...

Classifier is a generalization that, similar to acceptor, produces single output when terminates but has more than two terminal states.

===Transducers===

Transducers generate output based on a given input and/or a state using actions. They are used for control applications and in the field of computational linguistics.

In control applications, two types are distinguished:

;Moore machine: The FSM uses only entry actions, i.e., output depends only on the state. The advantage of the Moore model is a simplification of the behaviour. Consider an elevator door. The state machine recognizes two commands: "command_open" and "command_close" which trigger state changes. The entry action (E:) in state "Opening" starts a motor opening the door, the entry action in state "Closing" starts a motor in the other direction closing the door. States "Opened" and "Closed" stop the motor when fully opened or closed. They signal to the outside world (e.g., to other state machines) the situation: "door is open" or "door is closed".

Fig. 7 Transducer FSM: Mealy model example
;Mealy machine: The FSM uses only input actions, i.e., output depends on input and state. The use of a Mealy FSM leads often to a reduction of the number of states. The example in figure 7 shows a Mealy FSM implementing the same behaviour as in the Moore example (the behaviour depends on the implemented FSM execution model and will work, e.g., for virtual FSM but not for event driven FSM). There are two input actions (I:): "start motor to close the door if command_close arrives" and "start motor in the other direction to open the door if command_open arrives". The "opening" and "closing" intermediate states are not shown.

In practicewhat? mixed models are often used.

More details about the differences and usage of Moore and Mealy models, including an executable example, can be found in the external technical note "Moore or Mealy model?"

===Generators===
The sequencers or generators are a subclass of aforementioned types that have a single-letter input alphabet. They produce only one sequence, which can be interpreted as output sequence of transducer or classifier outputs.

===Determinism===
A further distinction is between deterministic (DFA) and non-deterministic (NFA, GNFA) automata. In deterministic automata, every state has exactly one transition for each possible input. In non-deterministic automata, an input can lead to one, more than one or no transition for a given state. This distinction is relevant in practice, but not in theory, as there exists an algorithm (the powerset construction) which can transform any NFA into a more complex DFA with identical functionality.

The FSM with only one state is called a combinatorial FSM and uses only input actions. This concept is useful in cases where a number of FSM are required to work together, and where it is convenient to consider a purely combinatorial part as a form of FSM to suit the design tools.

==Alternative semantics==
There are other sets of semantics available to represent state machines. For example, there are tools for modeling and designing logic for embedded controllers. Tiwari, A. (2002). Formal Semantics and Analysis Methods for Simulink Stateflow Models. They combine hierarchical state machines, flow graphs, and truth tables into one language, resulting in a different formalism and set of semantics. Figure 8 illustrates this mix of state machines and flow graphs with a set of states to represent the state of a stopwatch and a flow graph to control the ticks of the watch. These charts, like Harel's original state machines, Harel, D. (1987). A Visual Formalism for Complex Systems. Science of Computer Programming , 231–274. support hierarchically nested states, orthogonal regions, state actions, and transition actions. Alur, R., Kanade, A., Ramesh, S., & Shashidhar, K. C. (2008). Symbolic analysis for improving simulation coverage of Simulink/Stateflow models. Internation Conference on Embedded Software (pp. 89–98). Atlanta, GA: ACM. 

==FSM logic==
Fig. 8 FSM Logic (Mealy)

The next state and output of an FSM is a function of the input and of the current state. The FSM logic is shown in Figure 8.

==Mathematical model==
In accordance with the general classification, the following formal definitions are found:
* A deterministic finite state machine or acceptor deterministic finite state machine is a quintuple , where:
** is the input alphabet (a finite, non-empty set of symbols).
** is a finite, non-empty set of states.
** is an initial state, an element of .
** is the state-transition function: (in a nondeterministic finite automaton it would be , i.e., would return a set of states).
** is the set of final states, a (possibly empty) subset of .

For both deterministic and non-deterministic FSMs, it is conventional to allow to be a partial function, i.e. does not have to be defined for every combination of and . If an FSM is in a state , the next symbol is and is not defined, then can announce an error (i.e. reject the input). This is useful in definitions of general state machines, but less useful when transforming the machine. Some algorithms in their default form may require total functions.

A finite-state machine is a restricted Turing machine where the head can only perform "read" operations, and always moves from left to right. 

* A finite state transducer is a sextuple , where:
** is the input alphabet (a finite non empty set of symbols).
** is the output alphabet (a finite, non-empty set of symbols).
** is a finite, non-empty set of states.
** is the initial state, an element of . In a nondeterministic finite automaton, is a set of initial states.
** is the state-transition function: .
** is the output function.

If the output function is a function of a state and input alphabet () that definition corresponds to the Mealy model, and can be modelled as a Mealy machine. If the output function depends only on a state () that definition corresponds to the Moore model, and can be modelled as a Moore machine. A finite-state machine with no output function at all is known as a semiautomaton or transition system.

If we disregard the first output symbol of a Moore machine, , then it can be readily converted to an output-equivalent Mealy machine by setting the output function of every Mealy transition (i.e. labeling every edge) with the output symbol given of the destination Moore state. The converse transformation is less straightforward because a Mealy machine state may have different output labels on its incoming transitions (edges). Every such state needs to be split in multiple Moore machine states, one for every incident output symbol. 

==Optimization==

Optimizing an FSM means finding the machine with the minimum number of states that performs the same function. The fastest known algorithm doing this is the Hopcroft minimization algorithm. Hopcroft, John E (1971). An n log n algorithm for minimizing states in a finite automaton Almeida, Marco; Moreira, Nelma; Reis, Rogerio (2007). On the performance of automata minimization algorithms. Other techniques include using an implication table, or the Moore reduction procedure. Additionally, acyclic FSAs can be minimized in linear time Revuz (1992). Revuz D. Minimization of Acyclic automata in Linear Time. Theoretical Computer Science 92 (1992) 181-189 181 Elsevier 

==Implementation==

===Hardware applications===
Fig. 9 The circuit diagram for a 4-bit TTL counter, a type of state machine
In a digital circuit, an FSM may be built using a programmable logic device, a programmable logic controller, logic gates and flip flops or relays. More specifically, a hardware implementation requires a register to store state variables, a block of combinational logic which determines the state transition, and a second block of combinational logic that determines the output of an FSM. One of the classic hardware implementations is the Richards controller.

A particular case of Moore FSM, when output is directly connected to the state flip-flops, that is when output function is simple identity, is known as Medvedev FSM. It is advised in chip design that no logic is placed between primary I/O and registers to minimize interchip delays, which are usually long and limit the FSM frequencies.

===Software applications===
The following concepts are commonly used to build software applications with finite state machines:
*Automata-based programming
*Event-driven FSM
*Virtual FSM (VFSM)

===Finite Automata and Compilers===
Lexer example for C. Word categories: , , , .
Finite automata form a very integral and essential part of the frontend of programming language compilers. Such a frontend usually consists of a lexer and a parser.
Starting from a sequence of characters, the lexer composes a sequence of (categorized) words, cf. picture, from which the parser builds a syntax tree.
Each category of words has a finite automaton associated with it. Lexers use them to identify words in the language. The lexer and parser handles the regular and properly context-free parts of the programming language's grammar, respectively. 

==See also==
*Abstract state machines (ASM)
*Artificial intelligence (AI)
*Abstract State Machine Language (AsmL)
*Communicating finite-state machine
*Control system
*Control table
*Decision tables
*DEVS: Discrete Event System Specification
*Extended finite-state machine (EFSM)
*Finite state machine with datapath
*Hidden Markov model
*Petri net
*Pushdown automaton
*Quantum finite automata (QFA)
*Recognizable language
*Sequential logic
*Specification and Description Language
*State diagram
*Transition system
*Tree automaton
*Turing machine
*UML state machine
*SCXML
*YAKINDU Statechart Tools

==References==

==Further reading==

===General===
* 
*Wagner, F., "Modeling Software with Finite State Machines: A Practical Approach", Auerbach Publications, 2006, ISBN 0-8493-8086-3.
*ITU-T, Recommendation Z.100 Specification and Description Language (SDL)
*Samek, M., Practical Statecharts in C/C++, CMP Books, 2002, ISBN 1-57820-110-1.
*Samek, M., Practical UML Statecharts in C/C++, 2nd Edition, Newnes, 2008, ISBN 0-7506-8706-1.
*Gardner, T., Advanced State Management, 2007
*Cassandras, C., Lafortune, S., "Introduction to Discrete Event Systems". Kluwer, 1999, ISBN 0-7923-8609-4.
*Timothy Kam, Synthesis of Finite State Machines: Functional Optimization. Kluwer Academic Publishers, Boston 1997, ISBN 0-7923-9842-4
*Tiziano Villa, Synthesis of Finite State Machines: Logic Optimization. Kluwer Academic Publishers, Boston 1997, ISBN 0-7923-9892-0
*Carroll, J., Long, D., Theory of Finite Automata with an Introduction to Formal Languages. Prentice Hall, Englewood Cliffs, 1989.
*Kohavi, Z., Switching and Finite Automata Theory. McGraw-Hill, 1978.
*Gill, A., Introduction to the Theory of Finite-state Machines. McGraw-Hill, 1962.
*Ginsburg, S., An Introduction to Mathematical Machine Theory. Addison-Wesley, 1962.

===Finite state machines (automata theory) in theoretical computer science===
*
*
*
*
*
*
*
*
*
*
*
*
*
* 
*
*
*
*

===Abstract state machines in theoretical computer science===
*Yuri Gurevich (2000), Sequential Abstract State Machines Capture Sequential Algorithms, ACM Transactions on Computational Logic, vl. 1, no. 1 (July 2000), pages 77–111. http://research.microsoft.com/~gurevich/Opera/141.pdf

===Machine learning using finite-state algorithms===
*

===Hardware engineering: state minimization and synthesis of sequential circuits===
*
*
*
*

===Finite Markov chain processes===
::"We may think of a Markov chain as a process that moves successively through a set of states s1, s2, ..., sr. ... if it is in state si it moves on to the next stop to state sj with probability pij. These probabilities can be exhibited in the form of a transition matrix" (Kemeny (1959), p. 384)
Finite Markov-chain processes are also known as subshifts of finite type.

*
* Chapter 6 "Finite Markov Chains".

==External links==

* 
* Modeling a Simple AI behavior using a Finite State Machine Example of usage in Video Games
* Free On-Line Dictionary of Computing description of Finite State Machines
* NIST Dictionary of Algorithms and Data Structures description of Finite State Machines
* Interactive FSM: Control Circuit, demonstrates the logic flow of the Finite State Machines.

* FSM simulator, simulates DFAs, NFAs and ε-NFAs, including generated by regular expression.


