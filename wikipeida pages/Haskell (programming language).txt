[[Haskell (programming language)]]

Haskell is a standardized, general-purpose purely functional programming language, with non-strict semantics and strong static typing. It is named after logician Haskell Curry.

==History==
Following the release of Miranda by Research Software Ltd, in 1985, interest in lazy functional languages grew: by 1987, more than a dozen non-strict, purely functional programming languages existed. Of these, Miranda was the most widely used, but was proprietary software. At the conference on Functional Programming Languages and Computer Architecture (FPCA '87) in Portland, Oregon, a meeting was held during which participants formed a strong consensus that a committee should be formed to define an open standard for such languages. The committee's purpose was to consolidate the existing functional languages into a common one that would serve as a basis for future research in functional-language design.

===Haskell 1.0 to 1.4===
The first version of Haskell ("Haskell 1.0") was defined in 1990. The committee's efforts resulted in a series of language definitions (1.0, 1.1, 1.2, 1.3, 1.4).

===Haskell 98===
In late 1997, the series culminated in Haskell 98, intended to specify a stable, minimal, portable version of the language and an accompanying standard library for teaching, and as a base for future extensions. The committee expressly welcomed the creation of extensions and variants of Haskell 98 via adding and incorporating experimental features.

In February 1999, the Haskell 98 language standard was originally published as "The Haskell 98 Report". In January 2003, a revised version was published as "Haskell 98 Language and Libraries: The Revised Report". The language continues to evolve rapidly, with the Glasgow Haskell Compiler (GHC) implementation representing the current de facto standard. 

===Haskell Prime===
In early 2006, the process of defining a successor to the Haskell 98 standard, informally named Haskell Prime, began. This is an ongoing incremental process to revise the language definition, producing a new revision up to once per year. The first revision, named Haskell 2010, was announced in November 2009 and published in July 2010.

===Haskell 2010===
Haskell 2010 adds the foreign function interface (FFI) to Haskell, allowing for bindings to other programming languages, fixes some syntax issues (changes in the formal grammar) and bans so-called "n-plus-k-patterns", that is, definitions of the form fact (n+1) = (n+1) * fact n are no longer allowed. It introduces the Language-Pragma-Syntax-Extension which allows for designating a Haskell source as Haskell 2010 or requiring certain extensions to the Haskell language. The names of the extensions introduced in Haskell 2010 are
DoAndIfThenElse, HierarchicalModules, EmptyDataDeclarations, FixityResolution, ForeignFunctionInterface, LineCommentSyntax, PatternGuards, RelaxedDependencyAnalysis, LanguagePragma and NoNPlusKPatterns. 

==Features==

Haskell features lazy evaluation, pattern matching, list comprehension, type classes, and type polymorphism. It is a purely functional language, which means that in general, functions in Haskell do not have side effects. There is a distinct construct for representing side effects, orthogonal to the type of functions. A pure function may return a side effect which is subsequently executed, modeling the impure functions of other languages.

Haskell has a strong, static type system based on Hindley–Milner type inference. Haskell's principal innovation in this area is to add type classes, which were originally conceived as a principled way to add overloading to the language, but have since found many more uses. 

The construct which represents side effects is an example of a monad. Monads are a general framework which can model different kinds of computation, including error handling, nondeterminism, parsing, and software transactional memory. Monads are defined as ordinary datatypes, but Haskell provides some syntactic sugar for their use.

The language has an open, published specification, and multiple implementations exist.

There is an active community around the language, and more than 5400 third-party open-source libraries and tools are available in the online package repository Hackage. 

The main implementation of Haskell, GHC, is both an interpreter and native-code compiler that runs on most platforms. GHC is noted for its high-performance implementation of concurrency and parallelism, Computer Language Benchmarks Game and for having a rich type system incorporating recent innovations such as generalized algebraic data types and type families.

==Code examples==

The following is a Hello world program written in Haskell (note that all but the last line can be omitted):

module Main where

main :: IO ()
main = putStrLn "Hello, World!"

Here is the factorial function in Haskell, defined in a few different ways:

-- Type annotation (optional)
factorial :: Integer -> Integer

-- Using recursion
factorial 0 = 1
factorial n | n > 0 = n * factorial (n - 1)

-- Using recursion but written without pattern matching
factorial n = if n > 0 then n * factorial (n-1) else 1

-- Using a list
factorial n = product [1..n]

-- Using fold (implements product)
factorial n = foldl1 (*) [1..n]

-- Point-free style
factorial = foldr (*) 1 . enumFromTo 1

An efficient implementation of the Fibonacci numbers, as an infinite list, is this:

-- Type annotation (optional)
fib :: Int -> Integer

-- With self-referencing data
fib n = fibs !! n
 where fibs = 0 : scanl (+) 1 fibs
 -- 0,1,1,2,3,5,...

-- Same, coded directly
fib n = fibs !! n
 where fibs = 0 : 1 : next fibs
 next (a : t@(b:_)) = (a+b) : next t

-- Similar idea, using zipWith
fib n = fibs !! n
 where fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

-- Using a generator function
fib n = fibs (0,1) !! n
 where fibs (a,b) = a : fibs (b,a+b)

The Int type refers to a machine-sized integer (used as a list subscript with the !! operator), while Integer is an arbitrary-precision integer. For example, the above code quickly computes "fib 10000" as a 2090-digit number.

This is an implementation of the quick sort algorithm over lists, in which the first element is taken as the pivot:

quickSort :: Ord a => [a] -> [a]
quickSort [] = []
quickSort (x:xs) = quickSort [a | a <- xs, a < x] ++ -- Sort the left part of the list
 [x] ++ -- Insert pivot between two sorted parts
 quickSort [b | b <- xs, b >= x] -- Sort the right part of the list

==Implementations==

All listed implementations are distributed under open source licenses. There are currently no proprietary Haskell implementations. "Implementations" at the Haskell Wiki 

The following implementations comply fully, or very nearly, with the Haskell 98 standard.
* The Glasgow Haskell Compiler (GHC) compiles to native code on a number of different architectures—as well as to ANSI C—using C-- as an intermediate language. GHC has become the de facto standard Haskell dialect. C. Ryder and S. Thompson (2005). "Porting HaRe to the GHC API" There are libraries (e.g. bindings to OpenGL) that will work only with GHC. GHC is also distributed along with the Haskell platform.
* The Utrecht Haskell Compiler (UHC) is a Haskell implementation from Utrecht University. UHC supports almost all Haskell 98 features plus many experimental extensions. It is implemented using attribute grammars and is currently mainly used for research into generated type systems and language extensions.
* Jhc is a Haskell compiler written by John Meacham emphasising speed and efficiency of generated programs as well as exploration of new program transformations. 
* Ajhc is a fork of Jhc.
* LHC is a whole-program optimizing backend for GHC. It is based on Urban Boquist’s compiler intermediate language, GRIN. Older versions of LHC were based on Jhc rather than GHC.

The following implementations are no longer being actively maintained:
* Hugs, the Haskell User's Gofer System, is a bytecode interpreter. It used to be one of the most widely used implementations alongside the GHC compiler, but has now been mostly replaced by GHCi. It also comes with a graphics library.
* nhc98 is another bytecode compiler. Nhc98 focuses on minimizing memory usage.
* Yhc, the York Haskell Compiler was a fork of nhc98, with the goals of being simpler, more portable and more efficient, and integrating support for Hat, the Haskell tracer. It also featured a JavaScript backend allowing users to run Haskell programs in a web browser.
* HBC is an early implementation supporting Haskell 1.4. It was implemented by Lennart Augustsson in, and based on, Lazy ML. It has not been actively developed for some time.

Implementations below are not fully Haskell 98 compliant, and use a language that is a variant of Haskell:
* Gofer was an educational dialect of Haskell, with a feature called "constructor classes", developed by Mark Jones. It was supplanted by Hugs (see above).
* Helium is a newer dialect of Haskell. The focus is on making it easy to learn by providing clearer error messages. It currently lacks full support for type classes, rendering it incompatible with many Haskell programs.

==Applications==
Audrey Tang's Pugs is an implementation for the long-forthcoming Perl 6 language with an interpreter and compilers that proved useful after just a few months of its writing; similarly, GHC is often a testbed for advanced functional programming features and optimizations. Darcs is a revision control system written in Haskell, with several innovative features. Linspire GNU/Linux chose Haskell for system tools development. Xmonad is a window manager for the X Window System, written entirely in Haskell. xmonad.org 

Bluespec SystemVerilog (BSV) is a language for semiconductor design that is an extension of Haskell. Additionally, Bluespec, Inc.'s tools are implemented in Haskell. Cryptol, a language and toolchain for developing and verifying cryptographic algorithms, is implemented in Haskell. Notably, the first formally verified microkernel, seL4 was verified using Haskell.

There are Haskell web frameworks, HaskellWiki – Haskell web frameworks such as:
* Yesod
* Happstack
* Snap 

==Related languages==
Clean is a close relative of Haskell. Its biggest deviation from Haskell is in the use of uniqueness types instead of monads for I/O and side-effects.

A series of languages inspired by Haskell, but with different type systems, have been developed, including:
* Agda, a functional language with dependent types
* Idris, a general purpose functional language with dependent types
* Epigram, a functional language with dependent types suitable for proving properties of programs
* Cayenne, with dependent types
* Ωmega, strict and more

JVM-based:
* Frege, a Haskell-like language with Java's scalar types and good Java integration. The Frege prog. lang. Project Frege at google code Hellow World and more with Frege 
* Jaskell, a functional scripting programming language that runs in Java VM. Jaskell 

Other related languages include:
* Curry, a functional/logic programming language based on Haskell

Haskell has served as a testbed for many new ideas in language design. There have been a wide number of Haskell variants produced, exploring new language ideas, including:
* Parallel Haskell:
** From Glasgow University, supports clusters of machines or single multiprocessors. Glasgow Parallel Haskell GHC Language Features: Parallel Haskell Also within Haskell is support for Symmetric Multiprocessor parallelism. Using GHC: Using SML parallelism 
** From MIT MIT Parallel Haskell 
* Distributed Haskell (formerly Goffin) and Eden.
* Eager Haskell, based on speculative evaluation.
* Several object-oriented versions: Haskell++, and Mondrian.
* Generic Haskell, a version of Haskell with type system support for generic programming.
* O'Haskell, an extension of Haskell adding object-orientation and concurrent programming support which "has ... been superseded by Timber." OHaskell at HaskellWiki 
* Disciple, a strict-by-default (laziness available by annotation) dialect of Haskell which supports destructive update, computational effects, type directed field projections and allied functional goodness.
* Scotch, a kind of hybrid of Haskell and Python Scotch 
* Hume, a strict functional programming language for embedded systems based on processes as stateless automata over a sort of tuples of single element mailbox channels where the state is kept by feedback into the mailboxes, and a mapping description from outputs to channels as box wiring, with a Haskell-like expression language and syntax.

==Criticism==
Jan-Willem Maessen, in 2002, and Simon Peyton Jones, in 2003, discussed problems associated with lazy evaluation while also acknowledging the theoretical motivation for it, Jan-Willem Maessen. Eager Haskell: Resource-bounded execution yields efficient iteration. Proceedings of the 2002 ACM SIGPLAN workshop on Haskell. Simon Peyton Jones. Wearing the hair shirt: a retrospective on Haskell. Invited talk at POPL 2003. in addition to purely practical considerations such as improved performance. Lazy evaluation can lead to excellent performance, such as in The Computer Language Benchmarks Game They note that, in addition to adding some performance overhead, lazy evaluation makes it more difficult for programmers to reason about the performance of their code (particularly its space usage).

Bastiaan Heeren, Daan Leijen, and Arjan van IJzendoorn in 2003 also observed some stumbling blocks for Haskell learners: "The subtle syntax and sophisticated type system of Haskell are a double edged sword — highly appreciated by experienced programmers but also a source of frustration among beginners, since the generality of Haskell often leads to cryptic error messages." To address these, researchers from Utrecht University developed an advanced interpreter called Helium which improved the user-friendliness of error messages by limiting the generality of some Haskell features, and in particular removing support for type classes.

Ben Lippmeier designed Disciple as a strict-by-default (lazy by explicit annotation) dialect of Haskell with a type-and-effect system, to address Haskell's difficulties in reasoning about lazy evaluation and in using traditional data structures such as mutable arrays. Ben Lippmeier, Type Inference and Optimisation for an Impure World, Australian National University (2010) PhD thesis, chapter 1 He argues (p. 20) that "destructive update furnishes the programmer with two important and powerful tools... a set of efficient array-like data structures for managing collections of objects, and ... the ability to broadcast a new value to all parts of a program with minimal burden on the programmer."

Robert Harper, one of the authors of Standard ML, has given his reasons for not using Haskell to teach introductory programming. Among these are the difficulty of reasoning about resource usage with non-strict evaluation, that lazy evaluation complicates the definition of data types and inductive reasoning, 
 and the "inferiority" of Haskell's (old) class system compared to ML's module system. 
 

==Conferences and workshops==
The Haskell community meets regularly for research and development activities. The primary events are:
* The Haskell Symposium (formerly the Haskell Workshop)
* The Haskell Implementors Workshop
* The International Conference on Functional Programming

Since 2006, there have been a series of organized "hackathons", the Hac series, aimed at improving the programming language tools and libraries. 

Since 2005, a growing number of Haskell users' groups have formed, in the United States, Canada, Australia, South America, Europe and Asia.

==References==

==Further reading==
; Reports
* 
; Textbooks
*
*
*
*
*
*
*
; History
* 

==External links==

*
*Language and library specification at the Haskell Wiki
*

;Tutorials
*
*Learn you a Haskell for great good! by Miran Lipovača; assumes no knowledge
*School of Haskell; online tutorials and courses where the user can run and edit snippets of Haskell code in-place
*Try Haskell!, an in-browser interactive tutorial
*Yet Another Haskell Tutorial, by Hal Daumé III; assumes far less prior knowledge than official tutorial
*The Haskell Cheatsheet, compact language reference and mini-tutorial
*Hitchhikers guide to Haskell, a tutorial that guides you through using some complex features in Haskell

;Books
*Real World Haskell by Bryan O'Sullivan, Don Stewart, and John Goerzen, published by O'Reilly Media
*About Haskell. Humanly

;Various
*
*
*The Evolution of a Haskell Programmer, slightly humorous overview of different programming styles available in Haskell
*Online Bibliography of Haskell Research
*Haskell Weekly News
*The Monad.Reader, quarterly magazine on Haskell topics
*
*Leksah, a GTK-based Haskell IDE written in Haskell
*

;Applications
*Industrial Haskell Group, collaborative development
*Commercial Users of Functional Programming, specific projects
*Haskell in industry, a list of companies using Haskell commercially

 


